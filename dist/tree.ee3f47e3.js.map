{"version":3,"sources":["tree.js"],"names":["createTree","value","data","children","parent","addChild","node","newNode","push","travel","tree","fn","i","length","find","result","undefined","removeNode","siblings","index","splice","node2","node3","node5","console","log"],"mappings":"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","file":"tree.ee3f47e3.js","sourceRoot":"..\\src","sourcesContent":["const createTree = value => {\r\n  return {\r\n    data: value,\r\n    children: null,\r\n    parent: null\r\n  };\r\n};\r\nconst addChild = (node, value) => {\r\n  const newNode = {\r\n    data: value,\r\n    children: null,\r\n    parent: node\r\n  };\r\n  node.children = node.children || [];\r\n  node.children.push(newNode);\r\n  return newNode;\r\n};\r\nconst travel = (tree, fn) => {\r\n  fn(tree);\r\n  if (!tree.children) {\r\n    return;\r\n  }\r\n  for (let i = 0; i < tree.children.length; i++) {\r\n    travel(tree.children[i], fn);\r\n  }\r\n};\r\n\r\nconst find = (tree, node) => {\r\n  if (tree === node) {\r\n    return tree;\r\n  } else if (tree.children) {\r\n    for (let i = 0; i < tree.children.length; i++) {\r\n      const result = find(tree.children[i], node);\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n    return undefined;\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst removeNode = (tree, node) => {\r\n  const siblings = node.parent.children;\r\n  let index = 0;\r\n  for (let i = 1; i < siblings.length; i++) {\r\n    if (siblings[i] === node) {\r\n      index = i;\r\n    }\r\n  }\r\n  siblings.splice(index, 1);\r\n};\r\n\r\nconst tree = createTree(10);\r\nconst node2 = addChild(tree, 20);\r\nconst node3 = addChild(tree, 30);\r\naddChild(tree, 40);\r\nconst node5 = addChild(tree, 50);\r\naddChild(node2, 201);\r\naddChild(node2, 202);\r\naddChild(node2, 203);\r\naddChild(node2, 204);\r\nconsole.log(tree);\r\n\r\nconst fn = node => {\r\n  console.log(node.data);\r\n};\r\n\r\nremoveNode(tree, node5);\r\nconsole.log(tree);\r\n"]}